SFC(Single File Component) : Bütün componentleri bağımısz olarak kendilerina ait template script style olan 
vue dosyalarına Single File Component Denir

SOC(Seperation Of Concerns) : İlgilenilen konuların ayrıştırlması. üç farklı bölümün tek dostada olması ve o dosyanın
tek işlevde olması olayı

Bootstrapi kurma : npm install bootstrap

vue-router kurma : npm install vue-router@4
routering : sayfalar arası yönlendirme. yönlendirilecek sayfakların komponentleri views klasöründe oluşturulur.

İnterPolirion ( {{}}) : Burada data kısmında tanımlanan değişkenler gösterilir javascript kodlexpressionları da kullanılabilir.

Kısayollar
-vb yazınca vbase e tıklayınca single page template oluşturur
Not : vbase-3-ts-setup typescript ve composition api ile şablon oluşturur
dipnot : vue vscode snippet eklentisi olması gerekir

-SPA(SİNGLE PAGE APPLİCATİON) : TEK SAYFALI UYGULAMA : kullanıcı web uygulaması üzerindeki etkileşimleri ve gezintileri sanki
tek bir sayfa üzerinde yapıyormuş gibi görür. Tek sayfa uygulamalar bir başlangıç sayfası yükler ve kullanıcının etkileşimleri
sonucunda içeriği dinamik olarak değiştiren ve yeniden yüklemeyen bir yapı olarak çalışır.
routerlink componenti : linklere basınca direk değişmesi için kullanırız.
routerlink componenti vue router tarafından sağlanan bir gloval componenettir. ve uygulamamızda farklı görünümler arasında
gezinmemizi sağlar.

directive : vue ya özel komutlardır.talimatlardır. benim kendi data ya da değişkendeki veriyi html attribute una bağlamak istersek
v-bind directive ini kullanırız.
v-bind:bağlamak . v-bind a sadecedeğişken değil basit javascript kodlarını da yazabiliriz

Props : Parent component ten child component a bir veri iletişim methodudur.

v-for : Döngü kurmak için kullanılır .
Kullanımı : mesela books değişkeni bir dizi döngüde v-for="book in books" olarak döner.
v-for kullanıldığı zaman mutlaka :key ekleriz. Key değerinin uniq olması laızm. Bu şu ieş yarar :  herhangi bir şekilde 
bu elemanların herhangi birinde bir değişiklik yapıldığı zaman vue nun o değişiklik yapan elemanı performanslı bir şekilde
yakalamasını sağlar.

ONE DAY DATA FLOW : PARENT TAN CHİLD A PROPLA BİLGİ AKTARMA İŞLEMİ. child component a prop a değer atanamaz program hata verir. sadece readonly dir proplar.

computed : data propundan ya da componentin farklı özelliklerinden türetilmiş , hesaplanmış verilerdir.

javascript kısmında değişken kullanırken this kelimesini kullanırız ama template kısmında kullanmayız. Çünkü vue otomatik ola
rak data, computed properties ve methodları template in içerisine otomatik olarak bağlar, bind eder..

methods: istediğimiz işlemi yapmak için fonksiyonları methods property in içerisine yazarız.
vue templetinde kullanabilmek için de örneğin bu projede books sayfasında bir sonraki sayfaya geçmek istediğimiz >> butonuna
bastığımızda çalışacak fonksiyonu kullanmak için v-on:click bind directive ini kullanırız. kısaca @click ile de yazılabilir.

EMİT : CHİLD COMPONENTİNDEN PARENT COMPONENT E GÖNDERİLEN BİR BİLDİRİM İŞLEMİ OLARAK DÜŞÜNEBİLİRİZ.
this.$emit olarak yazılır javascriptte. $ ın sebebi vuejs in kendine has olan herhangi bir methodunu çalıştırdığımız zaman
ayırt etmek için kullanılan bir yöntem. örneğin biz elimizle emit() methodu yazdığımızda birbirine karışmaması için kullanılır.

:class="{'active': currentPage === page}" burada bootstrap class ları aktif olarak kullanabildiğimiz gibi kendimiz custom
classlarımızı da yazarak kullanabiliriz.active yazanın yerine

Life Cycle methods-YAŞAM DÖNGÜSÜ METHODLARI
COMPONENTLARIN DOM İÇERİSİNDE OLUŞTURULUP SONRASINDA DA KALDIRILMASI ARASINDA GEÇEN METHODLARDIR.
created : template daha compiler edilmeden yani componentteki html içerikleri daha dom içerisine yerleştirilmeden biz otomatik
bir method çalıştırıyoruz o da created dır.

 <!-- for=username aynı name e sahip  field ına ait olduğunu gösterir. input elementindeki is ile
    labeldaki for birbiryle örtüşür.-->
<label for="username" class="form-label">Username</label>

<!-- 
type="input un tipi text",
class="form-control" bootstrapin input elementine verilen bir class
id="username" input elementinin id'si uniq bir tanimlayici
name=örneğin formu doldurup gönderdiğimizde hangi input alanını doldurduğumuzu gösterir.
required=bu input alanınınzorunlu  bir alan olduğunu gösterir.
-->
<input type="text" class="form-control" id="username" name="username"  required>

Modifiers : v-model modifiers

v-model.number = arkada oarsefloat metodunu çalışıtırarak string bir ifadeyi float a çevirir ve sayı olarak alır.
ama input kısmına harf yazmasına izin verir.

v-model.lazy : arka planda çalışan input eventini change event e çevirir. yani her bir karaker girdiğinde değil inputun
odaktan çıkınca inputa girilen değeri alır ve günceller.

v-model.trim = inputa girilen boşlukları kaldırır. inputta boşluk kullanmasına izin vermesine rağmen girilen değeri 
boşluklar olmayacak şekilde günceller.

CORS HATASI

const response = await fetch('http://localhost:4000/api/v1/books'); BURADA DİREK FETCH ATARKEN api adresine farklı bir originden 
istek göndermeye çalışıyor o yüzden CORS HATASI ALIYOR
http://localhost:4000 PORT NUMARALARI ORİJİNLERİ BELİRLER BACKENDİN Kİ Bu
http://localhost:5173/ FRONTENDİN DE BU
FARKLI ORİGİNDE OLDUĞU İÇİN İZİN VERİLMİYOR VARSAYILAN OLARAK 
BU YÜZDEN BİZİM İZİN VERMEMİZ GEREKİYOR FARKLI ORİGİNLERDEN İSTEK ATABİLMEK İÇİN BACKEND E
BU YÜZDEN CORS PARKETİ İNDİRİLİR. npm i cors
backend>server.js dosyasında import edilir 
import cors from 'cors';
//CORS
const corsOptions = {
    origin : ['http://localhost:5173'],
    credentials : true, //cookie,authorization header gibi bözelliklere izin vermemizi sağlar
}

//CORS Middleware
app.use(cors(corsOptions));

//axiosService : veri tabanındaki isteklere erişmek için axios service den yararlanırız. npm install axios

//STATE MANAGEMENT, STORE MANTIĞI
State : Bir uygulamanın belirli bir anında sahip olduğu verilerin durumu
State Management : Stateleirn yani durumların birbirleriyle ilişkilerini yönetmek de statemanagement denir.
Store : Bir uygulamanın verilerinin merkezi bir yerde toplanmasına da store denir.

//Pinia : Önerilen durum  yönetim aracı vuejs in : npm install pinia
state : vuejs deki data görevini görür değişkenleri buraa tanımlarız
action : state i etkileyecek fonksiyonları burada yazarız.

//localStorage
Kullanıcı giriş yaptığında onun bilgilerini tarayıcıda hala tutmak istersek localStorage depolama alanını kullanırız.

//kullanıcın email ve şifreyle giriş yapabilmesi ----> user Authentication - kullanıcı kimliği doğrulama email ve şifre doğru mu vs
//user authorization ---> kullanıcı yetkilendirme - kullanıcın dashboard ı görüp görememesi

//protected route --> korumalı endpoint sonuç

//toastification --> genelde istek başarılı döndüğünde örneğin kayıt veya login olduğunda kullanıcıya işlem başarılı diye kayan mesaj
göstermek için kullanılır.

npm install --save vue-toastification@next








